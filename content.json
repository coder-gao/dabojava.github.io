{"meta":{"title":"Dabo","subtitle":"","description":"","author":"dabo","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2021-02-25T05:49:05.521Z","updated":"2021-02-25T05:49:05.521Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-02-25T05:34:09.000Z","updated":"2021-02-25T07:19:51.885Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"网站架构发展史","slug":"phylogeny","date":"2021-02-25T07:28:25.000Z","updated":"2021-02-25T15:06:47.287Z","comments":true,"path":"2021/02/25/phylogeny/","link":"","permalink":"http://example.com/2021/02/25/phylogeny/","excerpt":"网站架构发展史web1.0 用户打开浏览器,访问服务器的静态页面,网站里面只包含HTML,CSS,JS.这是web1.0时代常见的模式","text":"网站架构发展史web1.0 用户打开浏览器,访问服务器的静态页面,网站里面只包含HTML,CSS,JS.这是web1.0时代常见的模式 web2.0 2.0时代用户与服务器之间增加了一些交互,用户从浏览器输入一些数据,然后保存到数据库里面. 单体架构 早起传统JavaWeb开发模式,包含Model,View,Controller.以及HTML,CSS,JS.本质就是一个Serverlet或者叫做一种MVC的开发模式.这个时候是没有太多人来访问我们的网站的,只需要一台服务器,在服务器中,还包含文件服务器以及数据库.文件服务器会为用户提供一种文件存储的服务,比如用户头像.用户所有的数据全都保存在数据库中. 分离架构 随着网站需求越来越大,单体架构已经不能满足我们的业务.较常见的问题就是空间不足.一旦我们的服务器宕机,那么用户久无法访问我们的网站.随后我们采用分离模式解决这种问题,分离的好处就是,给服务器降压.这样的好处就是,一旦我们的服务器宕机,我们的文件服务器和数据库还可以继续工作 缓存机制 随着用户量越来越大,服务器的压力成倍增加.这时我们的数据库压力会随着用户量增加延迟.这时我们采用一种缓存中间件,用户的查询不会直接访问数据库,而是先访问我们的缓存中间件,如果缓存中有数据直接返回给用户,如果没有数据才会查询数据库. 负载均衡 之前我们所采用的都是单节点部署,这样会存在一个问题.就是一旦某个节点宕机,那么用户久无法访问我们的服务.这时我们就采用集群,负载均衡这样的概念.我们会部署多个服务器,每个服务器都是同样的个体,多个就是集群.通过集群可以提升系统的性能以及负载. 读写分离 之前我们虽然部署了集群,使用负载均衡算法减轻了服务器压力,但是数据库依然有大量读写操作.这时我们采用主从库,读写分离的模式,来减轻数据库压力 分布式数据库 业务量继续增大,现有的数据库模式压力依然很大.这时我们采用分库分表,把同一张表的数据,按照一定的算法,散列到不同的数据库.这是我们目前对数据库拆分最后的手段.只有在数据库规模非常大的时候才考虑使用它.同时也需要考虑分布式数据库中分布式主键的问题.同时引入搜索引擎","categories":[],"tags":[{"name":"架构","slug":"架构","permalink":"http://example.com/tags/%E6%9E%B6%E6%9E%84/"}]}],"categories":[],"tags":[{"name":"架构","slug":"架构","permalink":"http://example.com/tags/%E6%9E%B6%E6%9E%84/"}]}