<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dabo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-02-25T15:06:47.287Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>dabo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网站架构发展史</title>
    <link href="http://example.com/2021/02/25/phylogeny/"/>
    <id>http://example.com/2021/02/25/phylogeny/</id>
    <published>2021-02-25T07:28:25.000Z</published>
    <updated>2021-02-25T15:06:47.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网站架构发展史"><a href="#网站架构发展史" class="headerlink" title="网站架构发展史"></a>网站架构发展史</h2><h3 id="web1-0"><a href="#web1-0" class="headerlink" title="web1.0"></a>web1.0</h3><img src="/images/phylogeny/image-20210225171703791.png" alt="image-20210225171703791"  /><p>用户打开浏览器,访问服务器的静态页面,网站里面只包含HTML,CSS,JS.这是web1.0时代常见的模式</p><span id="more"></span><h3 id="web2-0"><a href="#web2-0" class="headerlink" title="web2.0"></a>web2.0</h3><img src="/images/phylogeny/image-20210225171924864.png" alt="image-20210225171924864"  /><p>2.0时代用户与服务器之间增加了一些交互,用户从浏览器输入一些数据,然后保存到数据库里面.</p><h3 id="单体架构"><a href="#单体架构" class="headerlink" title="单体架构"></a>单体架构</h3><img src="/images/phylogeny/image-20210225171224556.png" alt="image-20210225171224556" style="zoom: 67%;" /><p>早起传统JavaWeb开发模式,包含Model,View,Controller.以及HTML,CSS,JS.本质就是一个Serverlet或者叫做一种MVC的开发模式.这个时候是没有太多人来访问我们的网站的,只需要一台服务器,在服务器中,还包含文件服务器以及数据库.文件服务器会为用户提供一种文件存储的服务,比如用户头像.用户所有的数据全都保存在数据库中.</p><h3 id="分离架构"><a href="#分离架构" class="headerlink" title="分离架构"></a>分离架构</h3><img src="/images/phylogeny/image-20210225172528988.png" alt="image-20210225172528988"  /><p>随着网站需求越来越大,单体架构已经不能满足我们的业务.较常见的问题就是空间不足.一旦我们的服务器宕机,那么用户久无法访问我们的网站.随后我们采用分离模式解决这种问题,分离的好处就是,给服务器降压.这样的好处就是,一旦我们的服务器宕机,我们的文件服务器和数据库还可以继续工作</p><h3 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h3><img src="/images/phylogeny/image-20210225173229553.png" alt="image-20210225173229553"  /><p>随着用户量越来越大,服务器的压力成倍增加.这时我们的数据库压力会随着用户量增加延迟.这时我们采用一种缓存中间件,用户的查询不会直接访问数据库,而是先访问我们的缓存中间件,如果缓存中有数据直接返回给用户,如果没有数据才会查询数据库.</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><img src="/images/phylogeny/image-20210225211209105.png" alt="image-20210225211209105"  /><p>之前我们所采用的都是单节点部署,这样会存在一个问题.就是一旦某个节点宕机,那么用户久无法访问我们的服务.这时我们就采用集群,负载均衡这样的概念.我们会部署多个服务器,每个服务器都是同样的个体,多个就是集群.通过集群可以提升系统的性能以及负载.</p><h3 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h3><img src="/images/phylogeny/image-20210225175322079.png" alt="image-20210225175322079"  /><p>之前我们虽然部署了集群,使用负载均衡算法减轻了服务器压力,但是数据库依然有大量读写操作.这时我们采用主从库,读写分离的模式,来减轻数据库压力</p><h3 id="分布式数据库"><a href="#分布式数据库" class="headerlink" title="分布式数据库"></a>分布式数据库</h3><img src="/images/phylogeny/image-20210225180333883.png" alt="image-20210225180333883"  /><p>业务量继续增大,现有的数据库模式压力依然很大.这时我们采用分库分表,把同一张表的数据,按照一定的算法,散列到不同的数据库.这是我们目前对数据库拆分最后的手段.只有在数据库规模非常大的时候才考虑使用它.同时也需要考虑分布式数据库中分布式主键的问题.同时引入搜索引擎</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;网站架构发展史&quot;&gt;&lt;a href=&quot;#网站架构发展史&quot; class=&quot;headerlink&quot; title=&quot;网站架构发展史&quot;&gt;&lt;/a&gt;网站架构发展史&lt;/h2&gt;&lt;h3 id=&quot;web1-0&quot;&gt;&lt;a href=&quot;#web1-0&quot; class=&quot;headerlink&quot; title=&quot;web1.0&quot;&gt;&lt;/a&gt;web1.0&lt;/h3&gt;&lt;img src=&quot;/images/phylogeny/image-20210225171703791.png&quot; alt=&quot;image-20210225171703791&quot;  /&gt;

&lt;p&gt;用户打开浏览器,访问服务器的静态页面,网站里面只包含HTML,CSS,JS.这是web1.0时代常见的模式&lt;/p&gt;</summary>
    
    
    
    
    <category term="架构" scheme="http://example.com/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
</feed>
